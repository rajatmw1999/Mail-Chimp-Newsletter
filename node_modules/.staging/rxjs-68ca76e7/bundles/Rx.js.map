{"version":3,"file":null,"sources":["/usr/local/google/home/benlesh/github.com/benlesh/rxjs/node_modules/tslib/tslib.es6.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/util/root.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/util/isFunction.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/util/isArray.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/util/isObject.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/util/errorObject.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/util/tryCatch.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/util/UnsubscriptionError.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/Subscription.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/Observer.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/symbol/rxSubscriber.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/Subscriber.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/util/toSubscriber.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/symbol/observable.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/util/noop.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/util/pipe.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/Observable.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/util/ObjectUnsubscribedError.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/SubjectSubscription.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/Subject.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/AsyncSubject.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/BoundCallbackObservable.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/bindCallback.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/observable/bindCallback.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/BoundNodeCallbackObservable.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/bindNodeCallback.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/observable/bindNodeCallback.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/util/isScheduler.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/ScalarObservable.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/EmptyObservable.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/ArrayObservable.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/OuterSubscriber.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/util/isArrayLike.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/util/isPromise.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/symbol/iterator.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/InnerSubscriber.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/util/subscribeToResult.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/combineLatest.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/combineLatest.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/observable/combineLatest.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/of.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/PromiseObservable.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/IteratorObservable.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/ArrayLikeObservable.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/Notification.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/observeOn.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/FromObservable.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/from.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/mergeMap.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/util/identity.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/mergeAll.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/concatAll.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/concat.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/observable/concat.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/DeferObservable.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/defer.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/observable/defer.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/empty.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/observable/empty.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/ForkJoinObservable.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/forkJoin.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/observable/forkJoin.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/observable/from.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/FromEventObservable.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/fromEvent.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/observable/fromEvent.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/FromEventPatternObservable.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/fromEventPattern.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/observable/fromEventPattern.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/fromPromise.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/observable/fromPromise.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/GenerateObservable.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/generate.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/observable/generate.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/IfObservable.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/if.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/observable/if.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/util/isNumeric.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/scheduler/Action.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/scheduler/AsyncAction.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/Scheduler.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/scheduler/AsyncScheduler.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/scheduler/async.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/IntervalObservable.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/interval.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/observable/interval.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/merge.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/observable/merge.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/race.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/observable/race.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/NeverObservable.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/never.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/observable/never.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/observable/of.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/onErrorResumeNext.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/onErrorResumeNext.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/observable/onErrorResumeNext.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/PairsObservable.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/pairs.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/observable/pairs.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/RangeObservable.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/range.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/observable/range.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/UsingObservable.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/using.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/observable/using.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/ErrorObservable.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/throw.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/observable/throw.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/util/isDate.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/TimerObservable.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/timer.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/observable/timer.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/zip.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/zip.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/observable/zip.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/map.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/dom/AjaxObservable.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/dom/ajax.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/observable/dom/ajax.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/scheduler/QueueAction.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/scheduler/QueueScheduler.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/scheduler/queue.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/ReplaySubject.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/util/assign.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/dom/WebSocketSubject.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/dom/webSocket.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/observable/dom/webSocket.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/buffer.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/buffer.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/buffer.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/bufferCount.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/bufferCount.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/bufferCount.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/bufferTime.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/bufferTime.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/bufferTime.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/bufferToggle.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/bufferToggle.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/bufferToggle.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/bufferWhen.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/bufferWhen.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/bufferWhen.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/catchError.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/catch.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/catch.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/combineAll.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/combineAll.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/combineAll.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/combineLatest.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/combineLatest.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/concat.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/concat.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/concat.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/concatAll.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/concatAll.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/concatMap.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/concatMap.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/concatMap.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/concatMapTo.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/concatMapTo.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/concatMapTo.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/count.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/count.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/count.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/dematerialize.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/dematerialize.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/dematerialize.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/debounce.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/debounce.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/debounce.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/debounceTime.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/debounceTime.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/debounceTime.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/defaultIfEmpty.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/defaultIfEmpty.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/defaultIfEmpty.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/delay.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/delay.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/delay.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/delayWhen.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/delayWhen.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/delayWhen.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/util/Set.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/distinct.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/distinct.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/distinct.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/distinctUntilChanged.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/distinctUntilChanged.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/distinctUntilChanged.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/distinctUntilKeyChanged.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/distinctUntilKeyChanged.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/distinctUntilKeyChanged.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/tap.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/do.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/do.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/exhaust.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/exhaust.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/exhaust.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/exhaustMap.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/exhaustMap.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/exhaustMap.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/expand.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/expand.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/expand.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/util/ArgumentOutOfRangeError.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/elementAt.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/elementAt.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/elementAt.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/filter.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/filter.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/filter.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/finalize.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/finally.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/finally.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/find.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/find.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/find.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/findIndex.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/findIndex.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/findIndex.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/util/EmptyError.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/first.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/first.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/first.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/util/MapPolyfill.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/util/Map.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/util/FastMap.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/groupBy.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/groupBy.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/groupBy.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/ignoreElements.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/ignoreElements.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/ignoreElements.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/isEmpty.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/isEmpty.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/isEmpty.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/audit.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/audit.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/audit.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/auditTime.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/auditTime.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/auditTime.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/last.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/last.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/last.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/let.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/let.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/every.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/every.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/every.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/map.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/map.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/mapTo.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/mapTo.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/mapTo.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/materialize.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/materialize.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/materialize.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/scan.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/takeLast.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/reduce.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/max.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/max.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/max.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/merge.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/merge.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/merge.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/mergeAll.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/mergeAll.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/mergeMap.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/mergeMap.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/mergeMapTo.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/mergeMapTo.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/mergeMapTo.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/mergeScan.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/mergeScan.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/mergeScan.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/min.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/min.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/min.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/refCount.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/ConnectableObservable.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/multicast.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/multicast.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/multicast.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/observeOn.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/observeOn.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/onErrorResumeNext.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/onErrorResumeNext.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/pairwise.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/pairwise.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/pairwise.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/util/not.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/partition.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/partition.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/partition.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/pluck.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/pluck.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/pluck.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/publish.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/publish.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/publish.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/BehaviorSubject.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/publishBehavior.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/publishBehavior.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/publishBehavior.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/publishReplay.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/publishReplay.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/publishReplay.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/publishLast.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/publishLast.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/publishLast.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/race.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/race.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/race.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/reduce.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/reduce.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/repeat.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/repeat.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/repeat.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/repeatWhen.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/repeatWhen.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/repeatWhen.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/retry.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/retry.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/retry.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/retryWhen.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/retryWhen.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/retryWhen.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/sample.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/sample.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/sample.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/sampleTime.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/sampleTime.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/sampleTime.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/scan.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/scan.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/sequenceEqual.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/sequenceEqual.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/sequenceEqual.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/share.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/share.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/share.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/shareReplay.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/shareReplay.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/shareReplay.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/single.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/single.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/single.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/skip.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/skip.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/skip.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/skipLast.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/skipLast.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/skipLast.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/skipUntil.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/skipUntil.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/skipUntil.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/skipWhile.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/skipWhile.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/skipWhile.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/startWith.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/startWith.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/startWith.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/util/Immediate.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/scheduler/AsapAction.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/scheduler/AsapScheduler.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/scheduler/asap.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/observable/SubscribeOnObservable.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/subscribeOn.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/subscribeOn.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/subscribeOn.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/switchMap.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/switchAll.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/switch.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/switch.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/switchMap.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/switchMap.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/switchMapTo.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/switchMapTo.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/switchMapTo.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/take.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/take.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/take.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/takeLast.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/takeLast.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/takeUntil.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/takeUntil.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/takeUntil.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/takeWhile.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/takeWhile.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/takeWhile.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/throttle.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/throttle.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/throttle.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/throttleTime.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/throttleTime.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/throttleTime.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/timeInterval.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/timeInterval.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/timeInterval.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/util/TimeoutError.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/timeout.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/timeout.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/timeout.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/timeoutWith.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/timeoutWith.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/timeoutWith.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/timestamp.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/timestamp.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/timestamp.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/toArray.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/toArray.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/toArray.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/toPromise.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/window.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/window.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/window.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/windowCount.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/windowCount.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/windowCount.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/windowTime.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/windowTime.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/windowTime.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/windowToggle.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/windowToggle.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/windowToggle.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/windowWhen.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/windowWhen.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/windowWhen.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/withLatestFrom.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/withLatestFrom.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/withLatestFrom.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/zip.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/zip.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operators/zipAll.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/operator/zipAll.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/add/operator/zipAll.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/testing/SubscriptionLog.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/testing/SubscriptionLoggable.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/util/applyMixins.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/testing/ColdObservable.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/testing/HotObservable.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/scheduler/VirtualTimeScheduler.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/testing/TestScheduler.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/util/AnimationFrame.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/scheduler/AnimationFrameAction.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/scheduler/AnimationFrameScheduler.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/scheduler/animationFrame.js","/usr/local/google/home/benlesh/github.com/benlesh/rxjs/dist/esm5_for_rollup/Rx.js"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\nvar __window = typeof window !== 'undefined' && window;\nvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nvar __global = typeof global !== 'undefined' && global;\nvar _root = __window || __global || __self;\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n    if (!_root) {\n        throw new Error('RxJS could not find any global context (window, self, global)');\n    }\n})();\nexport { _root as root };\n//# sourceMappingURL=root.js.map","export function isFunction(x) {\n    return typeof x === 'function';\n}\n//# sourceMappingURL=isFunction.js.map","export var isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArray.js.map","export function isObject(x) {\n    return x != null && typeof x === 'object';\n}\n//# sourceMappingURL=isObject.js.map","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport var errorObject = { e: {} };\n//# sourceMappingURL=errorObject.js.map","import { errorObject } from './errorObject';\nvar tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    }\n    catch (e) {\n        errorObject.e = e;\n        return errorObject;\n    }\n}\nexport function tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\n;\n//# sourceMappingURL=tryCatch.js.map","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport var UnsubscriptionError = (function (_super) {\n    __extends(UnsubscriptionError, _super);\n    function UnsubscriptionError(errors) {\n        _super.call(this);\n        this.errors = errors;\n        var err = Error.call(this, errors ?\n            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return ((i + 1) + \") \" + err.toString()); }).join('\\n  ') : '');\n        this.name = err.name = 'UnsubscriptionError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return UnsubscriptionError;\n}(Error));\n//# sourceMappingURL=UnsubscriptionError.js.map","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport var Subscription = (function () {\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    function Subscription(unsubscribe) {\n        /**\n         * A flag to indicate whether this Subscription has already been unsubscribed.\n         * @type {boolean}\n         */\n        this.closed = false;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        // null out _subscriptions first so any child subscriptions that attempt\n        // to remove themselves from this subscription will noop\n        this._subscriptions = null;\n        var index = -1;\n        var len = _parents ? _parents.length : 0;\n        // if this._parent is null, then so is this._parents, and we\n        // don't have to remove ourselves from any parent subscriptions.\n        while (_parent) {\n            _parent.remove(this);\n            // if this._parents is null or index >= len,\n            // then _parent is set to null, and the loop exits\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction(_unsubscribe)) {\n            var trial = tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject.e instanceof UnsubscriptionError ?\n                    flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]);\n            }\n        }\n        if (isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject(sub)) {\n                    var trial = tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject.e;\n                        if (err instanceof UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError(errors);\n        }\n    };\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || (teardown === Subscription.EMPTY)) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n                    var tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    };\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    Subscription.prototype._addParent = function (parent) {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        if (!_parent || _parent === parent) {\n            // If we don't have a parent, or the new parent is the same as the\n            // current parent, then set this._parent to the new parent.\n            this._parent = parent;\n        }\n        else if (!_parents) {\n            // If there's already one parent, but not multiple, allocate an Array to\n            // store the rest of the parent Subscriptions.\n            this._parents = [parent];\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            // Only add the new parent to the _parents list if it's not already there.\n            _parents.push(parent);\n        }\n    };\n    Subscription.EMPTY = (function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription()));\n    return Subscription;\n}());\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError) ? err.errors : err); }, []);\n}\n//# sourceMappingURL=Subscription.js.map","export var empty = {\n    closed: true,\n    next: function (value) { },\n    error: function (err) { throw err; },\n    complete: function () { }\n};\n//# sourceMappingURL=Observer.js.map","import { root } from '../util/root';\nvar Symbol = root.Symbol;\nexport var rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n    Symbol.for('rxSubscriber') : '@@rxSubscriber';\n/**\n * @deprecated use rxSubscriber instead\n */\nexport var $$rxSubscriber = rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map","import { isFunction } from './util/isFunction';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport var Subscriber = (function (_super) {\n    __extends(Subscriber, _super);\n    /**\n     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n     * defined Observer or a `next` callback function.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     */\n    function Subscriber(destinationOrNext, error, complete) {\n        _super.call(this);\n        this.syncErrorValue = null;\n        this.syncErrorThrown = false;\n        this.syncErrorThrowable = false;\n        this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                this.destination = emptyObserver;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    this.destination = emptyObserver;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    // HACK(benlesh): To resolve an issue where Node users may have multiple\n                    // copies of rxjs in their node_modules directory.\n                    if (isTrustedSubscriber(destinationOrNext)) {\n                        var trustedSubscriber = destinationOrNext[rxSubscriberSymbol]();\n                        this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n                        this.destination = trustedSubscriber;\n                        trustedSubscriber.add(this);\n                    }\n                    else {\n                        this.syncErrorThrowable = true;\n                        this.destination = new SafeSubscriber(this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                this.syncErrorThrowable = true;\n                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n                break;\n        }\n    }\n    Subscriber.prototype[rxSubscriberSymbol] = function () { return this; };\n    /**\n     * A static factory for a Subscriber, given a (potentially partial) definition\n     * of an Observer.\n     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n     * Observer represented by the given arguments.\n     */\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `next` from\n     * the Observable, with a value. The Observable may call this method 0 or more\n     * times.\n     * @param {T} [value] The `next` value.\n     * @return {void}\n     */\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `error` from\n     * the Observable, with an attached {@link Error}. Notifies the Observer that\n     * the Observable has experienced an error condition.\n     * @param {any} [err] The `error` exception.\n     * @return {void}\n     */\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive a valueless notification of type\n     * `complete` from the Observable. Notifies the Observer that the Observable\n     * has finished sending push-based notifications.\n     * @return {void}\n     */\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    /** @deprecated internal use only */ Subscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        return this;\n    };\n    return Subscriber;\n}(Subscription));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SafeSubscriber = (function (_super) {\n    __extends(SafeSubscriber, _super);\n    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n        _super.call(this);\n        this._parentSubscriber = _parentSubscriber;\n        var next;\n        var context = this;\n        if (isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== emptyObserver) {\n                context = Object.create(observerOrNext);\n                if (isFunction(context.unsubscribe)) {\n                    this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = this.unsubscribe.bind(this);\n            }\n        }\n        this._context = context;\n        this._next = next;\n        this._error = error;\n        this._complete = complete;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (!_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._error) {\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                throw err;\n            }\n            else {\n                _parentSubscriber.syncErrorValue = err;\n                _parentSubscriber.syncErrorThrown = true;\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        var _this = this;\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._complete) {\n                var wrappedComplete = function () { return _this._complete.call(_this._context); };\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            throw err;\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            parent.syncErrorValue = err;\n            parent.syncErrorThrown = true;\n            return true;\n        }\n        return false;\n    };\n    /** @deprecated internal use only */ SafeSubscriber.prototype._unsubscribe = function () {\n        var _parentSubscriber = this._parentSubscriber;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber));\nfunction isTrustedSubscriber(obj) {\n    return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriberSymbol]);\n}\n//# sourceMappingURL=Subscriber.js.map","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nexport function toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriberSymbol]) {\n            return nextOrObserver[rxSubscriberSymbol]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber(emptyObserver);\n    }\n    return new Subscriber(nextOrObserver, error, complete);\n}\n//# sourceMappingURL=toSubscriber.js.map","import { root } from '../util/root';\nexport function getSymbolObservable(context) {\n    var $$observable;\n    var Symbol = context.Symbol;\n    if (typeof Symbol === 'function') {\n        if (Symbol.observable) {\n            $$observable = Symbol.observable;\n        }\n        else {\n            $$observable = Symbol('observable');\n            Symbol.observable = $$observable;\n        }\n    }\n    else {\n        $$observable = '@@observable';\n    }\n    return $$observable;\n}\nexport var observable = getSymbolObservable(root);\n/**\n * @deprecated use observable instead\n */\nexport var $$observable = observable;\n//# sourceMappingURL=observable.js.map","/* tslint:disable:no-empty */\nexport function noop() { }\n//# sourceMappingURL=noop.js.map","import { noop } from './noop';\n/* tslint:enable:max-line-length */\nexport function pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i - 0] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\n/* @internal */\nexport function pipeFromArray(fns) {\n    if (!fns) {\n        return noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\n    };\n}\n//# sourceMappingURL=pipe.js.map","import { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport var Observable = (function () {\n    /**\n     * @constructor\n     * @param {Function} subscribe the function that is called when the Observable is\n     * initially subscribed to. This function is given a Subscriber, to which new values\n     * can be `next`ed, or an `error` method can be called to raise an error, or\n     * `complete` can be called to notify of a successful completion.\n     */\n    function Observable(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    /**\n     * Creates a new Observable, with this Observable as the source, and the passed\n     * operator defined as the new observable's operator.\n     * @method lift\n     * @param {Operator} operator the operator defining the operation to take on the observable\n     * @return {Observable} a new observable with the Operator applied\n     */\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    /**\n     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n     *\n     * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n     *\n     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n     * thought.\n     *\n     * Apart from starting the execution of an Observable, this method allows you to listen for values\n     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n     * following ways.\n     *\n     * The first way is creating an object that implements {@link Observer} interface. It should have methods\n     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n     * be left uncaught.\n     *\n     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n     *\n     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n     *\n     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n     * It is an Observable itself that decides when these functions will be called. For example {@link of}\n     * by default emits all its values synchronously. Always check documentation for how given Observable\n     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n     *\n     * @example <caption>Subscribe with an Observer</caption>\n     * const sumObserver = {\n     *   sum: 0,\n     *   next(value) {\n     *     console.log('Adding: ' + value);\n     *     this.sum = this.sum + value;\n     *   },\n     *   error() { // We actually could just remove this method,\n     *   },        // since we do not really care about errors right now.\n     *   complete() {\n     *     console.log('Sum equals: ' + this.sum);\n     *   }\n     * };\n     *\n     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n     * .subscribe(sumObserver);\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Subscribe with functions</caption>\n     * let sum = 0;\n     *\n     * Rx.Observable.of(1, 2, 3)\n     * .subscribe(\n     *   function(value) {\n     *     console.log('Adding: ' + value);\n     *     sum = sum + value;\n     *   },\n     *   undefined,\n     *   function() {\n     *     console.log('Sum equals: ' + sum);\n     *   }\n     * );\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Cancel a subscription</caption>\n     * const subscription = Rx.Observable.interval(1000).subscribe(\n     *   num => console.log(num),\n     *   undefined,\n     *   () => console.log('completed!') // Will not be called, even\n     * );                                // when cancelling subscription\n     *\n     *\n     * setTimeout(() => {\n     *   subscription.unsubscribe();\n     *   console.log('unsubscribed!');\n     * }, 2500);\n     *\n     * // Logs:\n     * // 0 after 1s\n     * // 1 after 2s\n     * // \"unsubscribed!\" after 2.5s\n     *\n     *\n     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n     *  Observable.\n     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n     *  the error will be thrown as unhandled.\n     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n     * @return {ISubscription} a subscription reference to the registered handlers\n     * @method subscribe\n     */\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this.source);\n        }\n        else {\n            sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n        }\n        if (sink.syncErrorThrowable) {\n            sink.syncErrorThrowable = false;\n            if (sink.syncErrorThrown) {\n                throw sink.syncErrorValue;\n            }\n        }\n        return sink;\n    };\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            sink.syncErrorThrown = true;\n            sink.syncErrorValue = err;\n            sink.error(err);\n        }\n    };\n    /**\n     * @method forEach\n     * @param {Function} next a handler for each value emitted by the observable\n     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n     * @return {Promise} a promise that either resolves on observable completion or\n     *  rejects with the handled error\n     */\n    Observable.prototype.forEach = function (next, PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n                PromiseCtor = root.Rx.config.Promise;\n            }\n            else if (root.Promise) {\n                PromiseCtor = root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            // Must be declared in a separate statement to avoid a RefernceError when\n            // accessing subscription below in the closure due to Temporal Dead Zone.\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                if (subscription) {\n                    // if there is a subscription, then we can surmise\n                    // the next handling is asynchronous. Any errors thrown\n                    // need to be rejected explicitly and unsubscribe must be\n                    // called manually\n                    try {\n                        next(value);\n                    }\n                    catch (err) {\n                        reject(err);\n                        subscription.unsubscribe();\n                    }\n                }\n                else {\n                    // if there is NO subscription, then we're getting a nexted\n                    // value synchronously during subscription. We can just call it.\n                    // If it errors, Observable's `subscribe` will ensure the\n                    // unsubscription logic is called, then synchronously rethrow the error.\n                    // After that, Promise will trap the error and send it\n                    // down the rejection path.\n                    next(value);\n                }\n            }, reject, resolve);\n        });\n    };\n    /** @deprecated internal use only */ Observable.prototype._subscribe = function (subscriber) {\n        return this.source.subscribe(subscriber);\n    };\n    /**\n     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n     * @method Symbol.observable\n     * @return {Observable} this instance of the observable\n     */\n    Observable.prototype[Symbol_observable] = function () {\n        return this;\n    };\n    /* tslint:enable:max-line-length */\n    /**\n     * Used to stitch together functional operators into a chain.\n     * @method pipe\n     * @return {Observable} the Observable result of all of the operators having\n     * been called in the order they were passed in.\n     *\n     * @example\n     *\n     * import { map, filter, scan } from 'rxjs/operators';\n     *\n     * Rx.Observable.interval(1000)\n     *   .pipe(\n     *     filter(x => x % 2 === 0),\n     *     map(x => x + x),\n     *     scan((acc, x) => acc + x)\n     *   )\n     *   .subscribe(x => console.log(x))\n     */\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i - 0] = arguments[_i];\n        }\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipeFromArray(operations)(this);\n    };\n    /* tslint:enable:max-line-length */\n    Observable.prototype.toPromise = function (PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n                PromiseCtor = root.Rx.config.Promise;\n            }\n            else if (root.Promise) {\n                PromiseCtor = root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n        });\n    };\n    // HACK: Since TypeScript inherits static properties too, we have to\n    // fight against TypeScript here so Subject can have a different static create signature\n    /**\n     * Creates a new cold Observable by calling the Observable constructor\n     * @static true\n     * @owner Observable\n     * @method create\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n     * @return {Observable} a new cold observable\n     */\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\n//# sourceMappingURL=Observable.js.map","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport var ObjectUnsubscribedError = (function (_super) {\n    __extends(ObjectUnsubscribedError, _super);\n    function ObjectUnsubscribedError() {\n        var err = _super.call(this, 'object unsubscribed');\n        this.name = err.name = 'ObjectUnsubscribedError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return ObjectUnsubscribedError;\n}(Error));\n//# sourceMappingURL=ObjectUnsubscribedError.js.map","import { Subscription } from './Subscription';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var SubjectSubscription = (function (_super) {\n    __extends(SubjectSubscription, _super);\n    function SubjectSubscription(subject, subscriber) {\n        _super.call(this);\n        this.subject = subject;\n        this.subscriber = subscriber;\n        this.closed = false;\n    }\n    SubjectSubscription.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var subject = this.subject;\n        var observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        var subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    };\n    return SubjectSubscription;\n}(Subscription));\n//# sourceMappingURL=SubjectSubscription.js.map","import { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n/**\n * @class SubjectSubscriber<T>\n */\nexport var SubjectSubscriber = (function (_super) {\n    __extends(SubjectSubscriber, _super);\n    function SubjectSubscriber(destination) {\n        _super.call(this, destination);\n        this.destination = destination;\n    }\n    return SubjectSubscriber;\n}(Subscriber));\n/**\n * @class Subject<T>\n */\nexport var Subject = (function (_super) {\n    __extends(Subject, _super);\n    function Subject() {\n        _super.call(this);\n        this.observers = [];\n        this.closed = false;\n        this.isStopped = false;\n        this.hasError = false;\n        this.thrownError = null;\n    }\n    Subject.prototype[rxSubscriberSymbol] = function () {\n        return new SubjectSubscriber(this);\n    };\n    Subject.prototype.lift = function (operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype.next = function (value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    };\n    Subject.prototype.error = function (err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.complete = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    };\n    Subject.prototype._trySubscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else {\n            return _super.prototype._trySubscribe.call(this, subscriber);\n        }\n    };\n    /** @deprecated internal use only */ Subject.prototype._subscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription(this, subscriber);\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable();\n        observable.source = this;\n        return observable;\n    };\n    Subject.create = function (destination, source) {\n        return new AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable));\n/**\n * @class AnonymousSubject<T>\n */\nexport var AnonymousSubject = (function (_super) {\n    __extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        _super.call(this);\n        this.destination = destination;\n        this.source = source;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var destination = this.destination;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var destination = this.destination;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var destination = this.destination;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    };\n    /** @deprecated internal use only */ AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return Subscription.EMPTY;\n        }\n    };\n    return AnonymousSubject;\n}(Subject));\n//# sourceMappingURL=Subject.js.map","import { Subject } from './Subject';\nimport { Subscription } from './Subscription';\n/**\n * @class AsyncSubject<T>\n */\nexport var AsyncSubject = (function (_super) {\n    __extends(AsyncSubject, _super);\n    function AsyncSubject() {\n        _super.apply(this, arguments);\n        this.value = null;\n        this.hasNext = false;\n        this.hasCompleted = false;\n    }\n    /** @deprecated internal use only */ AsyncSubject.prototype._subscribe = function (subscriber) {\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription.EMPTY;\n        }\n        else if (this.hasCompleted && this.hasNext) {\n            subscriber.next(this.value);\n            subscriber.complete();\n            return Subscription.EMPTY;\n        }\n        return _super.prototype._subscribe.call(this, subscriber);\n    };\n    AsyncSubject.prototype.next = function (value) {\n        if (!this.hasCompleted) {\n            this.value = value;\n            this.hasNext = true;\n        }\n    };\n    AsyncSubject.prototype.error = function (error) {\n        if (!this.hasCompleted) {\n            _super.prototype.error.call(this, error);\n        }\n    };\n    AsyncSubject.prototype.complete = function () {\n        this.hasCompleted = true;\n        if (this.hasNext) {\n            _super.prototype.next.call(this, this.value);\n        }\n        _super.prototype.complete.call(this);\n    };\n    return AsyncSubject;\n}(Subject));\n//# sourceMappingURL=AsyncSubject.js.map","import { Observable } from '../Observable';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var BoundCallbackObservable = (function (_super) {\n    __extends(BoundCallbackObservable, _super);\n    function BoundCallbackObservable(callbackFunc, selector, args, context, scheduler) {\n        _super.call(this);\n        this.callbackFunc = callbackFunc;\n        this.selector = selector;\n        this.args = args;\n        this.context = context;\n        this.scheduler = scheduler;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Converts a callback API to a function that returns an Observable.\n     *\n     * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n     * it will return a function `g` that when called as `g(x)` will output an\n     * Observable.</span>\n     *\n     * `bindCallback` is not an operator because its input and output are not\n     * Observables. The input is a function `func` with some parameters, the\n     * last parameter must be a callback function that `func` calls when it is\n     * done.\n     *\n     * The output of `bindCallback` is a function that takes the same parameters\n     * as `func`, except the last one (the callback). When the output function\n     * is called with arguments it will return an Observable. If function `func`\n     * calls its callback with one argument the Observable will emit that value.\n     * If on the other hand the callback is called with multiple values the resulting\n     * Observable will emit an array with said values as arguments.\n     *\n     * It is very important to remember that input function `func` is not called\n     * when the output function is, but rather when the Observable returned by the output\n     * function is subscribed. This means if `func` makes an AJAX request, that request\n     * will be made every time someone subscribes to the resulting Observable, but not before.\n     *\n     * Optionally, a selector function can be passed to `bindObservable`. The selector function\n     * takes the same arguments as the callback and returns the value that will be emitted by the Observable.\n     * Even though by default multiple arguments passed to callback appear in the stream as an array\n     * the selector function will be called with arguments directly, just as the callback would.\n     * This means you can imagine the default selector (when one is not provided explicitly)\n     * as a function that aggregates all its arguments into an array, or simply returns first argument\n     * if there is only one.\n     *\n     * The last optional parameter - {@link Scheduler} - can be used to control when the call\n     * to `func` happens after someone subscribes to Observable, as well as when results\n     * passed to callback will be emitted. By default, the subscription to  an Observable calls `func`\n     * synchronously, but using `Scheduler.async` as the last parameter will defer the call to `func`,\n     * just like wrapping the call in `setTimeout` with a timeout of `0` would. If you use the async Scheduler\n     * and call `subscribe` on the output Observable all function calls that are currently executing\n     * will end before `func` is invoked.\n     *\n     * By default results passed to the callback are emitted immediately after `func` invokes the callback.\n     * In particular, if the callback is called synchronously the subscription of the resulting Observable\n     * will call the `next` function synchronously as well.  If you want to defer that call,\n     * you may use `Scheduler.async` just as before.  This means that by using `Scheduler.async` you can\n     * ensure that `func` always calls its callback asynchronously, thus avoiding terrifying Zalgo.\n     *\n     * Note that the Observable created by the output function will always emit a single value\n     * and then complete immediately. If `func` calls the callback multiple times, values from subsequent\n     * calls will not appear in the stream. If you need to listen for multiple calls,\n     *  you probably want to use {@link fromEvent} or {@link fromEventPattern} instead.\n     *\n     * If `func` depends on some context (`this` property) and is not already bound the context of `func`\n     * will be the context that the output function has at call time. In particular, if `func`\n     * is called as a method of some objec and if `func` is not already bound, in order to preserve the context\n     * it is recommended that the context of the output function is set to that object as well.\n     *\n     * If the input function calls its callback in the \"node style\" (i.e. first argument to callback is\n     * optional error parameter signaling whether the call failed or not), {@link bindNodeCallback}\n     * provides convenient error handling and probably is a better choice.\n     * `bindCallback` will treat such functions the same as any other and error parameters\n     * (whether passed or not) will always be interpreted as regular callback argument.\n     *\n     *\n     * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n     * // Suppose we have jQuery.getJSON('/my/url', callback)\n     * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n     * var result = getJSONAsObservable('/my/url');\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     *\n     * @example <caption>Receive an array of arguments passed to a callback</caption>\n     * someFunction((a, b, c) => {\n     *   console.log(a); // 5\n     *   console.log(b); // 'some string'\n     *   console.log(c); // {someProperty: 'someValue'}\n     * });\n     *\n     * const boundSomeFunction = Rx.Observable.bindCallback(someFunction);\n     * boundSomeFunction().subscribe(values => {\n     *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]\n     * });\n     *\n     *\n     * @example <caption>Use bindCallback with a selector function</caption>\n     * someFunction((a, b, c) => {\n     *   console.log(a); // 'a'\n     *   console.log(b); // 'b'\n     *   console.log(c); // 'c'\n     * });\n     *\n     * const boundSomeFunction = Rx.Observable.bindCallback(someFunction, (a, b, c) => a + b + c);\n     * boundSomeFunction().subscribe(value => {\n     *   console.log(value) // 'abc'\n     * });\n     *\n     *\n     * @example <caption>Compare behaviour with and without async Scheduler</caption>\n     * function iCallMyCallbackSynchronously(cb) {\n     *   cb();\n     * }\n     *\n     * const boundSyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously);\n     * const boundAsyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);\n     *\n     * boundSyncFn().subscribe(() => console.log('I was sync!'));\n     * boundAsyncFn().subscribe(() => console.log('I was async!'));\n     * console.log('This happened...');\n     *\n     * // Logs:\n     * // I was sync!\n     * // This happened...\n     * // I was async!\n     *\n     *\n     * @example <caption>Use bindCallback on an object method</caption>\n     * const boundMethod = Rx.Observable.bindCallback(someObject.methodWithCallback);\n     * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject\n     * .subscribe(subscriber);\n     *\n     *\n     * @see {@link bindNodeCallback}\n     * @see {@link from}\n     * @see {@link fromPromise}\n     *\n     * @param {function} func A function with a callback as the last parameter.\n     * @param {function} [selector] A function which takes the arguments from the\n     * callback and maps them to a value that is emitted on the output Observable.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * callbacks.\n     * @return {function(...params: *): Observable} A function which returns the\n     * Observable that delivers the same values the callback would deliver.\n     * @static true\n     * @name bindCallback\n     * @owner Observable\n     */\n    BoundCallbackObservable.create = function (func, selector, scheduler) {\n        if (selector === void 0) { selector = undefined; }\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            return new BoundCallbackObservable(func, selector, args, this, scheduler);\n        };\n    };\n    /** @deprecated internal use only */ BoundCallbackObservable.prototype._subscribe = function (subscriber) {\n        var callbackFunc = this.callbackFunc;\n        var args = this.args;\n        var scheduler = this.scheduler;\n        var subject = this.subject;\n        if (!scheduler) {\n            if (!subject) {\n                subject = this.subject = new AsyncSubject();\n                var handler = function handlerFn() {\n                    var innerArgs = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        innerArgs[_i - 0] = arguments[_i];\n                    }\n                    var source = handlerFn.source;\n                    var selector = source.selector, subject = source.subject;\n                    if (selector) {\n                        var result_1 = tryCatch(selector).apply(this, innerArgs);\n                        if (result_1 === errorObject) {\n                            subject.error(errorObject.e);\n                        }\n                        else {\n                            subject.next(result_1);\n                            subject.complete();\n                        }\n                    }\n                    else {\n                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n                        subject.complete();\n                    }\n                };\n                // use named function instance to avoid closure.\n                handler.source = this;\n                var result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n                if (result === errorObject) {\n                    subject.error(errorObject.e);\n                }\n            }\n            return subject.subscribe(subscriber);\n        }\n        else {\n            return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber: subscriber, context: this.context });\n        }\n    };\n    BoundCallbackObservable.dispatch = function (state) {\n        var self = this;\n        var source = state.source, subscriber = state.subscriber, context = state.context;\n        var callbackFunc = source.callbackFunc, args = source.args, scheduler = source.scheduler;\n        var subject = source.subject;\n        if (!subject) {\n            subject = source.subject = new AsyncSubject();\n            var handler = function handlerFn() {\n                var innerArgs = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    innerArgs[_i - 0] = arguments[_i];\n                }\n                var source = handlerFn.source;\n                var selector = source.selector, subject = source.subject;\n                if (selector) {\n                    var result_2 = tryCatch(selector).apply(this, innerArgs);\n                    if (result_2 === errorObject) {\n                        self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject: subject }));\n                    }\n                    else {\n                        self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));\n                    }\n                }\n                else {\n                    var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n                    self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));\n                }\n            };\n            // use named function to pass values in without closure\n            handler.source = source;\n            var result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n            if (result === errorObject) {\n                subject.error(errorObject.e);\n            }\n        }\n        self.add(subject.subscribe(subscriber));\n    };\n    return BoundCallbackObservable;\n}(Observable));\nfunction dispatchNext(arg) {\n    var value = arg.value, subject = arg.subject;\n    subject.next(value);\n    subject.complete();\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subject = arg.subject;\n    subject.error(err);\n}\n//# sourceMappingURL=BoundCallbackObservable.js.map","import { BoundCallbackObservable } from './BoundCallbackObservable';\nexport var bindCallback = BoundCallbackObservable.create;\n//# sourceMappingURL=bindCallback.js.map","import { Observable } from '../../Observable';\nimport { bindCallback as staticBindCallback } from '../../observable/bindCallback';\nObservable.bindCallback = staticBindCallback;\n//# sourceMappingURL=bindCallback.js.map","import { Observable } from '../Observable';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var BoundNodeCallbackObservable = (function (_super) {\n    __extends(BoundNodeCallbackObservable, _super);\n    function BoundNodeCallbackObservable(callbackFunc, selector, args, context, scheduler) {\n        _super.call(this);\n        this.callbackFunc = callbackFunc;\n        this.selector = selector;\n        this.args = args;\n        this.context = context;\n        this.scheduler = scheduler;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Converts a Node.js-style callback API to a function that returns an\n     * Observable.\n     *\n     * <span class=\"informal\">It's just like {@link bindCallback}, but the\n     * callback is expected to be of type `callback(error, result)`.</span>\n     *\n     * `bindNodeCallback` is not an operator because its input and output are not\n     * Observables. The input is a function `func` with some parameters, but the\n     * last parameter must be a callback function that `func` calls when it is\n     * done. The callback function is expected to follow Node.js conventions,\n     * where the first argument to the callback is an error object, signaling\n     * whether call was successful. If that object is passed to callback, it means\n     * something went wrong.\n     *\n     * The output of `bindNodeCallback` is a function that takes the same\n     * parameters as `func`, except the last one (the callback). When the output\n     * function is called with arguments, it will return an Observable.\n     * If `func` calls its callback with error parameter present, Observable will\n     * error with that value as well. If error parameter is not passed, Observable will emit\n     * second parameter. If there are more parameters (third and so on),\n     * Observable will emit an array with all arguments, except first error argument.\n     *\n     * Optionally `bindNodeCallback` accepts selector function, which allows you to\n     * make resulting Observable emit value computed by selector, instead of regular\n     * callback arguments. It works similarly to {@link bindCallback} selector, but\n     * Node.js-style error argument will never be passed to that function.\n     *\n     * Note that `func` will not be called at the same time output function is,\n     * but rather whenever resulting Observable is subscribed. By default call to\n     * `func` will happen synchronously after subscription, but that can be changed\n     * with proper {@link Scheduler} provided as optional third parameter. Scheduler\n     * can also control when values from callback will be emitted by Observable.\n     * To find out more, check out documentation for {@link bindCallback}, where\n     * Scheduler works exactly the same.\n     *\n     * As in {@link bindCallback}, context (`this` property) of input function will be set to context\n     * of returned function, when it is called.\n     *\n     * After Observable emits value, it will complete immediately. This means\n     * even if `func` calls callback again, values from second and consecutive\n     * calls will never appear on the stream. If you need to handle functions\n     * that call callbacks multiple times, check out {@link fromEvent} or\n     * {@link fromEventPattern} instead.\n     *\n     * Note that `bindNodeCallback` can be used in non-Node.js environments as well.\n     * \"Node.js-style\" callbacks are just a convention, so if you write for\n     * browsers or any other environment and API you use implements that callback style,\n     * `bindNodeCallback` can be safely used on that API functions as well.\n     *\n     * Remember that Error object passed to callback does not have to be an instance\n     * of JavaScript built-in `Error` object. In fact, it does not even have to an object.\n     * Error parameter of callback function is interpreted as \"present\", when value\n     * of that parameter is truthy. It could be, for example, non-zero number, non-empty\n     * string or boolean `true`. In all of these cases resulting Observable would error\n     * with that value. This means usually regular style callbacks will fail very often when\n     * `bindNodeCallback` is used. If your Observable errors much more often then you\n     * would expect, check if callback really is called in Node.js-style and, if not,\n     * switch to {@link bindCallback} instead.\n     *\n     * Note that even if error parameter is technically present in callback, but its value\n     * is falsy, it still won't appear in array emitted by Observable or in selector function.\n     *\n     *\n     * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n     * import * as fs from 'fs';\n     * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n     * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     *\n     * @example <caption>Use on function calling callback with multiple arguments</caption>\n     * someFunction((err, a, b) => {\n     *   console.log(err); // null\n     *   console.log(a); // 5\n     *   console.log(b); // \"some string\"\n     * });\n     * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n     * boundSomeFunction()\n     * .subscribe(value => {\n     *   console.log(value); // [5, \"some string\"]\n     * });\n     *\n     *\n     * @example <caption>Use with selector function</caption>\n     * someFunction((err, a, b) => {\n     *   console.log(err); // undefined\n     *   console.log(a); // \"abc\"\n     *   console.log(b); // \"DEF\"\n     * });\n     * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction, (a, b) => a + b);\n     * boundSomeFunction()\n     * .subscribe(value => {\n     *   console.log(value); // \"abcDEF\"\n     * });\n     *\n     *\n     * @example <caption>Use on function calling callback in regular style</caption>\n     * someFunction(a => {\n     *   console.log(a); // 5\n     * });\n     * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n     * boundSomeFunction()\n     * .subscribe(\n     *   value => {}             // never gets called\n     *   err => console.log(err) // 5\n     *);\n     *\n     *\n     * @see {@link bindCallback}\n     * @see {@link from}\n     * @see {@link fromPromise}\n     *\n     * @param {function} func Function with a Node.js-style callback as the last parameter.\n     * @param {function} [selector] A function which takes the arguments from the\n     * callback and maps those to a value to emit on the output Observable.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * callbacks.\n     * @return {function(...params: *): Observable} A function which returns the\n     * Observable that delivers the same values the Node.js callback would\n     * deliver.\n     * @static true\n     * @name bindNodeCallback\n     * @owner Observable\n     */\n    BoundNodeCallbackObservable.create = function (func, selector, scheduler) {\n        if (selector === void 0) { selector = undefined; }\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            return new BoundNodeCallbackObservable(func, selector, args, this, scheduler);\n        };\n    };\n    /** @deprecated internal use only */ BoundNodeCallbackObservable.prototype._subscribe = function (subscriber) {\n        var callbackFunc = this.callbackFunc;\n        var args = this.args;\n        var scheduler = this.scheduler;\n        var subject = this.subject;\n        if (!scheduler) {\n            if (!subject) {\n                subject = this.subject = new AsyncSubject();\n                var handler = function handlerFn() {\n                    var innerArgs = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        innerArgs[_i - 0] = arguments[_i];\n                    }\n                    var source = handlerFn.source;\n                    var selector = source.selector, subject = source.subject;\n                    var err = innerArgs.shift();\n                    if (err) {\n                        subject.error(err);\n                    }\n                    else if (selector) {\n                        var result_1 = tryCatch(selector).apply(this, innerArgs);\n                        if (result_1 === errorObject) {\n                            subject.error(errorObject.e);\n                        }\n                        else {\n                            subject.next(result_1);\n                            subject.complete();\n                        }\n                    }\n                    else {\n                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n                        subject.complete();\n                    }\n                };\n                // use named function instance to avoid closure.\n                handler.source = this;\n                var result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n                if (result === errorObject) {\n                    subject.error(errorObject.e);\n                }\n            }\n            return subject.subscribe(subscriber);\n        }\n        else {\n            return scheduler.schedule(dispatch, 0, { source: this, subscriber: subscriber, context: this.context });\n        }\n    };\n    return BoundNodeCallbackObservable;\n}(Observable));\nfunction dispatch(state) {\n    var self = this;\n    var source = state.source, subscriber = state.subscriber, context = state.context;\n    // XXX: cast to `any` to access to the private field in `source`.\n    var _a = source, callbackFunc = _a.callbackFunc, args = _a.args, scheduler = _a.scheduler;\n    var subject = source.subject;\n    if (!subject) {\n        subject = source.subject = new AsyncSubject();\n        var handler = function handlerFn() {\n            var innerArgs = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                innerArgs[_i - 0] = arguments[_i];\n            }\n            var source = handlerFn.source;\n            var selector = source.selector, subject = source.subject;\n            var err = innerArgs.shift();\n            if (err) {\n                self.add(scheduler.schedule(dispatchError, 0, { err: err, subject: subject }));\n            }\n            else if (selector) {\n                var result_2 = tryCatch(selector).apply(this, innerArgs);\n                if (result_2 === errorObject) {\n                    self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject: subject }));\n                }\n                else {\n                    self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));\n                }\n            }\n            else {\n                var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n                self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));\n            }\n        };\n        // use named function to pass values in without closure\n        handler.source = source;\n        var result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n        if (result === errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject: subject }));\n        }\n    }\n    self.add(subject.subscribe(subscriber));\n}\nfunction dispatchNext(arg) {\n    var value = arg.value, subject = arg.subject;\n    subject.next(value);\n    subject.complete();\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subject = arg.subject;\n    subject.error(err);\n}\n//# sourceMappingURL=BoundNodeCallbackObservable.js.map","import { BoundNodeCallbackObservable } from './BoundNodeCallbackObservable';\nexport var bindNodeCallback = BoundNodeCallbackObservable.create;\n//# sourceMappingURL=bindNodeCallback.js.map","import { Observable } from '../../Observable';\nimport { bindNodeCallback as staticBindNodeCallback } from '../../observable/bindNodeCallback';\nObservable.bindNodeCallback = staticBindNodeCallback;\n//# sourceMappingURL=bindNodeCallback.js.map","export function isScheduler(value) {\n    return value && typeof value.schedule === 'function';\n}\n//# sourceMappingURL=isScheduler.js.map","import { Observable } from '../Observable';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var ScalarObservable = (function (_super) {\n    __extends(ScalarObservable, _super);\n    function ScalarObservable(value, scheduler) {\n        _super.call(this);\n        this.value = value;\n        this.scheduler = scheduler;\n        this._isScalar = true;\n        if (scheduler) {\n            this._isScalar = false;\n        }\n    }\n    ScalarObservable.create = function (value, scheduler) {\n        return new ScalarObservable(value, scheduler);\n    };\n    ScalarObservable.dispatch = function (state) {\n        var done = state.done, value = state.value, subscriber = state.subscriber;\n        if (done) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(value);\n        if (subscriber.closed) {\n            return;\n        }\n        state.done = true;\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */ ScalarObservable.prototype._subscribe = function (subscriber) {\n        var value = this.value;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ScalarObservable.dispatch, 0, {\n                done: false, value: value, subscriber: subscriber\n            });\n        }\n        else {\n            subscriber.next(value);\n            if (!subscriber.closed) {\n                subscriber.complete();\n            }\n        }\n    };\n    return ScalarObservable;\n}(Observable));\n//# sourceMappingURL=ScalarObservable.js.map","import { Observable } from '../Observable';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var EmptyObservable = (function (_super) {\n    __extends(EmptyObservable, _super);\n    function EmptyObservable(scheduler) {\n        _super.call(this);\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer and immediately\n     * emits a complete notification.\n     *\n     * <span class=\"informal\">Just emits 'complete', and nothing else.\n     * </span>\n     *\n     * <img src=\"./img/empty.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the complete notification. It can be used for composing with other\n     * Observables, such as in a {@link mergeMap}.\n     *\n     * @example <caption>Emit the number 7, then complete.</caption>\n     * var result = Rx.Observable.empty().startWith(7);\n     * result.subscribe(x => console.log(x));\n     *\n     * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n     * var interval = Rx.Observable.interval(1000);\n     * var result = interval.mergeMap(x =>\n     *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n     * );\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following to the console:\n     * // x is equal to the count on the interval eg(0,1,2,3,...)\n     * // x will occur every 1000ms\n     * // if x % 2 is equal to 1 print abc\n     * // if x % 2 is not equal to 1 nothing will be output\n     *\n     * @see {@link create}\n     * @see {@link never}\n     * @see {@link of}\n     * @see {@link throw}\n     *\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emission of the complete notification.\n     * @return {Observable} An \"empty\" Observable: emits only the complete\n     * notification.\n     * @static true\n     * @name empty\n     * @owner Observable\n     */\n    EmptyObservable.create = function (scheduler) {\n        return new EmptyObservable(scheduler);\n    };\n    EmptyObservable.dispatch = function (arg) {\n        var subscriber = arg.subscriber;\n        subscriber.complete();\n    };\n    /** @deprecated internal use only */ EmptyObservable.prototype._subscribe = function (subscriber) {\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });\n        }\n        else {\n            subscriber.complete();\n        }\n    };\n    return EmptyObservable;\n}(Observable));\n//# sourceMappingURL=EmptyObservable.js.map","import { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { isScheduler } from '../util/isScheduler';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var ArrayObservable = (function (_super) {\n    __extends(ArrayObservable, _super);\n    function ArrayObservable(array, scheduler) {\n        _super.call(this);\n        this.array = array;\n        this.scheduler = scheduler;\n        if (!scheduler && array.length === 1) {\n            this._isScalar = true;\n            this.value = array[0];\n        }\n    }\n    ArrayObservable.create = function (array, scheduler) {\n        return new ArrayObservable(array, scheduler);\n    };\n    /**\n     * Creates an Observable that emits some values you specify as arguments,\n     * immediately one after the other, and then emits a complete notification.\n     *\n     * <span class=\"informal\">Emits the arguments you provide, then completes.\n     * </span>\n     *\n     * <img src=\"./img/of.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the arguments given, and the complete notification thereafter. It can\n     * be used for composing with other Observables, such as with {@link concat}.\n     * By default, it uses a `null` IScheduler, which means the `next`\n     * notifications are sent synchronously, although with a different IScheduler\n     * it is possible to determine when those notifications will be delivered.\n     *\n     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n     * var numbers = Rx.Observable.of(10, 20, 30);\n     * var letters = Rx.Observable.of('a', 'b', 'c');\n     * var interval = Rx.Observable.interval(1000);\n     * var result = numbers.concat(letters).concat(interval);\n     * result.subscribe(x => console.log(x));\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link never}\n     * @see {@link throw}\n     *\n     * @param {...T} values Arguments that represent `next` values to be emitted.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emissions of the `next` notifications.\n     * @return {Observable<T>} An Observable that emits each given input value.\n     * @static true\n     * @name of\n     * @owner Observable\n     */\n    ArrayObservable.of = function () {\n        var array = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            array[_i - 0] = arguments[_i];\n        }\n        var scheduler = array[array.length - 1];\n        if (isScheduler(scheduler)) {\n            array.pop();\n        }\n        else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len > 1) {\n            return new ArrayObservable(array, scheduler);\n        }\n        else if (len === 1) {\n            return new ScalarObservable(array[0], scheduler);\n        }\n        else {\n            return new EmptyObservable(scheduler);\n        }\n    };\n    ArrayObservable.dispatch = function (state) {\n        var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;\n        if (index >= count) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(array[index]);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */ ArrayObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var array = this.array;\n        var count = array.length;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ArrayObservable.dispatch, 0, {\n                array: array, index: index, count: count, subscriber: subscriber\n            });\n        }\n        else {\n            for (var i = 0; i < count && !subscriber.closed; i++) {\n                subscriber.next(array[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayObservable;\n}(Observable));\n//# sourceMappingURL=ArrayObservable.js.map","import { Subscriber } from './Subscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var OuterSubscriber = (function (_super) {\n    __extends(OuterSubscriber, _super);\n    function OuterSubscriber() {\n        _super.apply(this, arguments);\n    }\n    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    OuterSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.destination.error(error);\n    };\n    OuterSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.destination.complete();\n    };\n    return OuterSubscriber;\n}(Subscriber));\n//# sourceMappingURL=OuterSubscriber.js.map","export var isArrayLike = (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArrayLike.js.map","export function isPromise(value) {\n    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\n//# sourceMappingURL=isPromise.js.map","import { root } from '../util/root';\nexport function symbolIteratorPonyfill(root) {\n    var Symbol = root.Symbol;\n    if (typeof Symbol === 'function') {\n        if (!Symbol.iterator) {\n            Symbol.iterator = Symbol('iterator polyfill');\n        }\n        return Symbol.iterator;\n    }\n    else {\n        // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n        var Set_1 = root.Set;\n        if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {\n            return '@@iterator';\n        }\n        var Map_1 = root.Map;\n        // required for compatability with es6-shim\n        if (Map_1) {\n            var keys = Object.getOwnPropertyNames(Map_1.prototype);\n            for (var i = 0; i < keys.length; ++i) {\n                var key = keys[i];\n                // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n                if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {\n                    return key;\n                }\n            }\n        }\n        return '@@iterator';\n    }\n}\nexport var iterator = symbolIteratorPonyfill(root);\n/**\n * @deprecated use iterator instead\n */\nexport var $$iterator = iterator;\n//# sourceMappingURL=iterator.js.map","import { Subscriber } from './Subscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var InnerSubscriber = (function (_super) {\n    __extends(InnerSubscriber, _super);\n    function InnerSubscriber(parent, outerValue, outerIndex) {\n        _super.call(this);\n        this.parent = parent;\n        this.outerValue = outerValue;\n        this.outerIndex = outerIndex;\n        this.index = 0;\n    }\n    InnerSubscriber.prototype._next = function (value) {\n        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n    };\n    InnerSubscriber.prototype._error = function (error) {\n        this.parent.notifyError(error, this);\n        this.unsubscribe();\n    };\n    InnerSubscriber.prototype._complete = function () {\n        this.parent.notifyComplete(this);\n        this.unsubscribe();\n    };\n    return InnerSubscriber;\n}(Subscriber));\n//# sourceMappingURL=InnerSubscriber.js.map","import { root } from './root';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {\n    var destination = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n    if (destination.closed) {\n        return null;\n    }\n    if (result instanceof Observable) {\n        if (result._isScalar) {\n            destination.next(result.value);\n            destination.complete();\n            return null;\n        }\n        else {\n            destination.syncErrorThrowable = true;\n            return result.subscribe(destination);\n        }\n    }\n    else if (isArrayLike(result)) {\n        for (var i = 0, len = result.length; i < len && !destination.closed; i++) {\n            destination.next(result[i]);\n        }\n        if (!destination.closed) {\n            destination.complete();\n        }\n    }\n    else if (isPromise(result)) {\n        result.then(function (value) {\n            if (!destination.closed) {\n                destination.next(value);\n                destination.complete();\n            }\n        }, function (err) { return destination.error(err); })\n            .then(null, function (err) {\n            // Escaping the Promise trap: globally throw unhandled errors\n            root.setTimeout(function () { throw err; });\n        });\n        return destination;\n    }\n    else if (result && typeof result[Symbol_iterator] === 'function') {\n        var iterator = result[Symbol_iterator]();\n        do {\n            var item = iterator.next();\n            if (item.done) {\n                destination.complete();\n                break;\n            }\n            destination.next(item.value);\n            if (destination.closed) {\n                break;\n            }\n        } while (true);\n    }\n    else if (result && typeof result[Symbol_observable] === 'function') {\n        var obs = result[Symbol_observable]();\n        if (typeof obs.subscribe !== 'function') {\n            destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n        }\n        else {\n            return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n        }\n    }\n    else {\n        var value = isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n        var msg = (\"You provided \" + value + \" where a stream was expected.\")\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        destination.error(new TypeError(msg));\n    }\n    return null;\n}\n//# sourceMappingURL=subscribeToResult.js.map","import { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nvar none = {};\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = null;\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n    if (observables.length === 1 && isArray(observables[0])) {\n        observables = observables[0].slice();\n    }\n    return function (source) { return source.lift.call(new ArrayObservable([source].concat(observables)), new CombineLatestOperator(project)); };\n}\nexport var CombineLatestOperator = (function () {\n    function CombineLatestOperator(project) {\n        this.project = project;\n    }\n    CombineLatestOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n    };\n    return CombineLatestOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var CombineLatestSubscriber = (function (_super) {\n    __extends(CombineLatestSubscriber, _super);\n    function CombineLatestSubscriber(destination, project) {\n        _super.call(this, destination);\n        this.project = project;\n        this.active = 0;\n        this.values = [];\n        this.observables = [];\n    }\n    CombineLatestSubscriber.prototype._next = function (observable) {\n        this.values.push(none);\n        this.observables.push(observable);\n    };\n    CombineLatestSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            this.active = len;\n            this.toRespond = len;\n            for (var i = 0; i < len; i++) {\n                var observable = observables[i];\n                this.add(subscribeToResult(this, observable, observable, i));\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {\n        if ((this.active -= 1) === 0) {\n            this.destination.complete();\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var values = this.values;\n        var oldVal = values[outerIndex];\n        var toRespond = !this.toRespond\n            ? 0\n            : oldVal === none ? --this.toRespond : this.toRespond;\n        values[outerIndex] = innerValue;\n        if (toRespond === 0) {\n            if (this.project) {\n                this._tryProject(values);\n            }\n            else {\n                this.destination.next(values.slice());\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype._tryProject = function (values) {\n        var result;\n        try {\n            result = this.project.apply(this, values);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return CombineLatestSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=combineLatest.js.map","import { isScheduler } from '../util/isScheduler';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from './ArrayObservable';\nimport { CombineLatestOperator } from '../operators/combineLatest';\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n *\n * @example <caption>Combine two timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>Combine an array of Observables</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n *\n *\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nexport function combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = null;\n    var scheduler = null;\n    if (isScheduler(observables[observables.length - 1])) {\n        scheduler = observables.pop();\n    }\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n    if (observables.length === 1 && isArray(observables[0])) {\n        observables = observables[0];\n    }\n    return new ArrayObservable(observables, scheduler).lift(new CombineLatestOperator(project));\n}\n//# sourceMappingURL=combineLatest.js.map","import { Observable } from '../../Observable';\nimport { combineLatest as combineLatestStatic } from '../../observable/combineLatest';\nObservable.combineLatest = combineLatestStatic;\n//# sourceMappingURL=combineLatest.js.map","import { ArrayObservable } from './ArrayObservable';\nexport var of = ArrayObservable.of;\n//# sourceMappingURL=of.js.map","import { root } from '../util/root';\nimport { Observable } from '../Observable';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var PromiseObservable = (function (_super) {\n    __extends(PromiseObservable, _super);\n    function PromiseObservable(promise, scheduler) {\n        _super.call(this);\n        this.promise = promise;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Converts a Promise to an Observable.\n     *\n     * <span class=\"informal\">Returns an Observable that just emits the Promise's\n     * resolved value, then completes.</span>\n     *\n     * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n     * Observable. If the Promise resolves with a value, the output Observable\n     * emits that resolved value as a `next`, and then completes. If the Promise\n     * is rejected, then the output Observable emits the corresponding Error.\n     *\n     * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n     * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @see {@link bindCallback}\n     * @see {@link from}\n     *\n     * @param {PromiseLike<T>} promise The promise to be converted.\n     * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n     * the delivery of the resolved value (or the rejection).\n     * @return {Observable<T>} An Observable which wraps the Promise.\n     * @static true\n     * @name fromPromise\n     * @owner Observable\n     */\n    PromiseObservable.create = function (promise, scheduler) {\n        return new PromiseObservable(promise, scheduler);\n    };\n    /** @deprecated internal use only */ PromiseObservable.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var promise = this.promise;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    subscriber.next(this.value);\n                    subscriber.complete();\n                }\n            }\n            else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.next(value);\n                        subscriber.complete();\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.error(err);\n                    }\n                })\n                    .then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    root.setTimeout(function () { throw err; });\n                });\n            }\n        }\n        else {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });\n                }\n            }\n            else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));\n                    }\n                })\n                    .then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    root.setTimeout(function () { throw err; });\n                });\n            }\n        }\n    };\n    return PromiseObservable;\n}(Observable));\nfunction dispatchNext(arg) {\n    var value = arg.value, subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.next(value);\n        subscriber.complete();\n    }\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.error(err);\n    }\n}\n//# sourceMappingURL=PromiseObservable.js.map","import { root } from '../util/root';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var IteratorObservable = (function (_super) {\n    __extends(IteratorObservable, _super);\n    function IteratorObservable(iterator, scheduler) {\n        _super.call(this);\n        this.scheduler = scheduler;\n        if (iterator == null) {\n            throw new Error('iterator cannot be null.');\n        }\n        this.iterator = getIterator(iterator);\n    }\n    IteratorObservable.create = function (iterator, scheduler) {\n        return new IteratorObservable(iterator, scheduler);\n    };\n    IteratorObservable.dispatch = function (state) {\n        var index = state.index, hasError = state.hasError, iterator = state.iterator, subscriber = state.subscriber;\n        if (hasError) {\n            subscriber.error(state.error);\n            return;\n        }\n        var result = iterator.next();\n        if (result.done) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(result.value);\n        state.index = index + 1;\n        if (subscriber.closed) {\n            if (typeof iterator.return === 'function') {\n                iterator.return();\n            }\n            return;\n        }\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */ IteratorObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, iterator = _a.iterator, scheduler = _a.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(IteratorObservable.dispatch, 0, {\n                index: index, iterator: iterator, subscriber: subscriber\n            });\n        }\n        else {\n            do {\n                var result = iterator.next();\n                if (result.done) {\n                    subscriber.complete();\n                    break;\n                }\n                else {\n                    subscriber.next(result.value);\n                }\n                if (subscriber.closed) {\n                    if (typeof iterator.return === 'function') {\n                        iterator.return();\n                    }\n                    break;\n                }\n            } while (true);\n        }\n    };\n    return IteratorObservable;\n}(Observable));\nvar StringIterator = (function () {\n    function StringIterator(str, idx, len) {\n        if (idx === void 0) { idx = 0; }\n        if (len === void 0) { len = str.length; }\n        this.str = str;\n        this.idx = idx;\n        this.len = len;\n    }\n    StringIterator.prototype[Symbol_iterator] = function () { return (this); };\n    StringIterator.prototype.next = function () {\n        return this.idx < this.len ? {\n            done: false,\n            value: this.str.charAt(this.idx++)\n        } : {\n            done: true,\n            value: undefined\n        };\n    };\n    return StringIterator;\n}());\nvar ArrayIterator = (function () {\n    function ArrayIterator(arr, idx, len) {\n        if (idx === void 0) { idx = 0; }\n        if (len === void 0) { len = toLength(arr); }\n        this.arr = arr;\n        this.idx = idx;\n        this.len = len;\n    }\n    ArrayIterator.prototype[Symbol_iterator] = function () { return this; };\n    ArrayIterator.prototype.next = function () {\n        return this.idx < this.len ? {\n            done: false,\n            value: this.arr[this.idx++]\n        } : {\n            done: true,\n            value: undefined\n        };\n    };\n    return ArrayIterator;\n}());\nfunction getIterator(obj) {\n    var i = obj[Symbol_iterator];\n    if (!i && typeof obj === 'string') {\n        return new StringIterator(obj);\n    }\n    if (!i && obj.length !== undefined) {\n        return new ArrayIterator(obj);\n    }\n    if (!i) {\n        throw new TypeError('object is not iterable');\n    }\n    return obj[Symbol_iterator]();\n}\nvar maxSafeInteger = Math.pow(2, 53) - 1;\nfunction toLength(o) {\n    var len = +o.length;\n    if (isNaN(len)) {\n        return 0;\n    }\n    if (len === 0 || !numberIsFinite(len)) {\n        return len;\n    }\n    len = sign(len) * Math.floor(Math.abs(len));\n    if (len <= 0) {\n        return 0;\n    }\n    if (len > maxSafeInteger) {\n        return maxSafeInteger;\n    }\n    return len;\n}\nfunction numberIsFinite(value) {\n    return typeof value === 'number' && root.isFinite(value);\n}\nfunction sign(value) {\n    var valueAsNumber = +value;\n    if (valueAsNumber === 0) {\n        return valueAsNumber;\n    }\n    if (isNaN(valueAsNumber)) {\n        return valueAsNumber;\n    }\n    return valueAsNumber < 0 ? -1 : 1;\n}\n//# sourceMappingURL=IteratorObservable.js.map","import { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var ArrayLikeObservable = (function (_super) {\n    __extends(ArrayLikeObservable, _super);\n    function ArrayLikeObservable(arrayLike, scheduler) {\n        _super.call(this);\n        this.arrayLike = arrayLike;\n        this.scheduler = scheduler;\n        if (!scheduler && arrayLike.length === 1) {\n            this._isScalar = true;\n            this.value = arrayLike[0];\n        }\n    }\n    ArrayLikeObservable.create = function (arrayLike, scheduler) {\n        var length = arrayLike.length;\n        if (length === 0) {\n            return new EmptyObservable();\n        }\n        else if (length === 1) {\n            return new ScalarObservable(arrayLike[0], scheduler);\n        }\n        else {\n            return new ArrayLikeObservable(arrayLike, scheduler);\n        }\n    };\n    ArrayLikeObservable.dispatch = function (state) {\n        var arrayLike = state.arrayLike, index = state.index, length = state.length, subscriber = state.subscriber;\n        if (subscriber.closed) {\n            return;\n        }\n        if (index >= length) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(arrayLike[index]);\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */ ArrayLikeObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, arrayLike = _a.arrayLike, scheduler = _a.scheduler;\n        var length = arrayLike.length;\n        if (scheduler) {\n            return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n                arrayLike: arrayLike, index: index, length: length, subscriber: subscriber\n            });\n        }\n        else {\n            for (var i = 0; i < length 